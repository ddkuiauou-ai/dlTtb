name: Build Static JSON Content

on:
  # main 브랜치에 push가 있을 때 실행됩니다.
  push:
    branches:
      - main
  # GitHub Actions 탭에서 수동으로 실행할 수 있도록 합니다.
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 단일 스크립트들도 병렬로 빌드
  build_singular:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: ["search-index", "post-details", "keyword-pages"]
      fail-fast: false
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --silent

      - name: Check DB envs
        run: |
          missing=0
          for k in POSTGRES_HOST POSTGRES_PORT POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB; do
            if [ -z "${!k}" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi
          echo "DB secrets are set."

      - name: Build search index
        if: matrix.task == 'search-index'
        run: pnpm tsx scripts/build-search-index.ts
      - name: Validate output layout
        if: matrix.task == 'search-index'
        run: |
          set -euo pipefail
          test -f public/data/search-index.json
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'. Producers must write under posts/v1 or proper subtrees."
            exit 1
          fi

      - name: Build all post details
        if: matrix.task == 'post-details'
        run: pnpm tsx scripts/build-post-json.ts
      - name: Validate output layout
        if: matrix.task == 'post-details'
        run: |
          set -euo pipefail
          test -d public/data/posts/v1
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'. Producers must write under posts/v1."
            exit 1
          fi

      - name: Build all keyword pages
        if: matrix.task == 'keyword-pages'
        run: pnpm tsx scripts/build-keyword-json.ts
      - name: Validate output layout
        if: matrix.task == 'keyword-pages'
        run: |
          set -euo pipefail
          test -d public/data/keywords
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'. Producers must write under proper subtrees."
            exit 1
          fi

      - name: Upload singular build artifact (search-index)
        if: matrix.task == 'search-index'
        uses: actions/upload-artifact@v4
        with:
          name: artifact-singular-search-index
          path: public/data
          if-no-files-found: error
          retention-days: 3

      - name: Upload singular build artifact (post-details)
        if: matrix.task == 'post-details'
        uses: actions/upload-artifact@v4
        with:
          name: artifact-singular-post-details
          path: public/data
          if-no-files-found: error
          retention-days: 3

      - name: Upload singular build artifact (keyword-pages)
        if: matrix.task == 'keyword-pages'
        uses: actions/upload-artifact@v4
        with:
          name: artifact-singular-keyword-pages
          path: public/data
          if-no-files-found: error
          retention-days: 3

  # 'main' 페이지들을 병렬로 빌드하는 Job
  build_main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        range: ["3h", "6h", "24h", "1w"]
        section: ["fresh", "trending", "top", "ranked"]
      fail-fast: false # 특정 조합이 실패해도 다른 조합은 계속 실행합니다.
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --silent

      - name: Check DB envs
        run: |
          missing=0
          for k in POSTGRES_HOST POSTGRES_PORT POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB; do
            if [ -z "${!k}" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi
          echo "DB secrets are set."
      - name: Build main pages
        run: pnpm tsx scripts/build-main-json.ts
        env:
          RANGE: ${{ matrix.range }}
          SECTION: ${{ matrix.section }}
      - name: Validate output layout
        run: |
          set -euo pipefail
          test -d "public/data/home/v1/${{ matrix.range }}/${{ matrix.section }}"
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'."
            exit 1
          fi
      - name: Upload main build artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-main-${{ matrix.range }}-${{ matrix.section }}
          path: public/data
          if-no-files-found: error
          retention-days: 3

  # 'category' 페이지들을 병렬로 빌드하는 Job
  build_categories:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 참고: 이 목록을 실제 사용하는 카테고리 목록으로 확장해야 합니다.
        category: ["all", "humor", "video", "youtube", "info", "it", "sports", "game", "qna", "review", "news", "debate", "back", "zzal", "politics", "shopping", "etc"]
        range: ["3h", "6h", "24h", "1w"]
      fail-fast: false
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --silent

      - name: Check DB envs
        run: |
          missing=0
          for k in POSTGRES_HOST POSTGRES_PORT POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB; do
            if [ -z "${!k}" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi
          echo "DB secrets are set."
      - name: Build category pages
        run: pnpm tsx scripts/build-category-json.ts ${{ matrix.category }} ${{ matrix.range }}
      - name: Validate output layout
        run: |
          set -euo pipefail
          test -d "public/data/category/${{ matrix.category }}/v1/${{ matrix.range }}"
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'."
            exit 1
          fi
      - name: Upload category artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-category-${{ matrix.category }}-${{ matrix.range }}
          path: public/data
          if-no-files-found: error
          retention-days: 3

  # 'all-posts' 페이지들을 병렬로 빌드하는 Job
  build_all_posts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        range: ["3h", "6h", "24h", "1w"]
      fail-fast: false
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --silent

      - name: Check DB envs
        run: |
          missing=0
          for k in POSTGRES_HOST POSTGRES_PORT POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB; do
            if [ -z "${!k}" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi
          echo "DB secrets are set."
      - name: Build all posts pages
        run: pnpm tsx scripts/build-allposts-json.ts ${{ matrix.range }}
      - name: Validate output layout
        run: |
          set -euo pipefail
          test -d "public/data/all/v1/${{ matrix.range }}"
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'."
            exit 1
          fi
      - name: Upload all-posts artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-allposts-${{ matrix.range }}
          path: public/data
          if-no-files-found: error
          retention-days: 3

  # 모든 빌드 Job이 완료된 후, 결과물들을 합치고 배포하는 Job
  package_and_deploy:
    runs-on: ubuntu-latest
    # 위에서 정의한 모든 빌드 Job들이 성공해야 이 Job이 실행됩니다.
    needs: [build_singular, build_main, build_categories, build_all_posts]
    permissions:
      contents: read
      deployments: write
    env:
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --silent

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine artifacts
        run: |
          set -euo pipefail
          mkdir -p public/data
          for d in artifacts/*/; do
            [ -d "$d" ] && rsync -a "$d" public/data/
          done
          echo "files=$(find public/data -type f | wc -l)"
          du -sh public/data || true

      - name: Check DB envs
        run: |
          HOST='${{ secrets.POSTGRES_HOST }}'
          PORT='${{ secrets.POSTGRES_PORT }}'
          USER='${{ secrets.POSTGRES_USER }}'
          PASS='${{ secrets.POSTGRES_PASSWORD }}'
          DB='${{ secrets.POSTGRES_DB }}'

          missing=0
          for k in HOST PORT USER PASS DB; do
            v=$(eval echo \${$k})
            if [ -z "$v" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi
          echo "DB secrets are set."

      - name: Check Clerk publishable key (masked-safe)
        run: |
          KEY='${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}'
          if [ -z "$KEY" ]; then
            echo "::error::NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY secret is empty."
            exit 1
          fi
          echo "Clerk publishable key is set."

      - name: Build & Export Next.js
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        run: |
          pnpm next build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy out --project-name=${{ secrets.CLOUDFLARE_PAGES_PROJECT }}
          gitHubToken: ${{ secrets.TOKEN_GITHUB_COM }}