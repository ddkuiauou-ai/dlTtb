name: Build Static JSON Content

on:
  # main 브랜치에 push가 있을 때 실행됩니다.
  push:
    branches:
      - main
  # GitHub Actions 탭에서 수동으로 실행할 수 있도록 합니다.
  workflow_dispatch:

jobs:
  # 단일 스크립트들도 병렬로 빌드
  build_singular:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: ["search-index", "post-details", "keyword-pages"]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check DB ENVs (masked-safe)
        run: |
          HOST='${{ secrets.POSTGRES_HOST }}'
          PORT='${{ secrets.POSTGRES_PORT }}'
          USER='${{ secrets.POSTGRES_USER }}'
          PASS='${{ secrets.POSTGRES_PASSWORD }}'
          DB='${{ secrets.POSTGRES_DB }}'

          missing=0
          for k in HOST PORT USER PASS DB; do
            v=$(eval echo \${$k})
            if [ -z "$v" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi

          echo "All Postgres secrets are set."
          echo "masked=postgresql://${USER:+***}@${HOST}${PORT:+:$PORT}/${DB}"
          echo "host=$HOST port=${PORT:-5432} user_set=$([ -n "$USER" ] && echo yes || echo no) db=$DB"
          echo "password_len=${#PASS}"
          echo "password_sha256=$(printf '%s' "$PASS" | sha256sum | cut -d' ' -f1)"

      - name: Build search index
        if: matrix.task == 'search-index'
        run: pnpm tsx scripts/build-search-index.ts
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      - name: Validate output layout
        if: matrix.task == 'search-index'
        run: |
          set -euo pipefail
          test -f public/data/search-index.json
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'. Producers must write under posts/v1 or proper subtrees."
            exit 1
          fi

      - name: Build all post details
        if: matrix.task == 'post-details'
        run: pnpm tsx scripts/build-post-json.ts
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      - name: Validate output layout
        if: matrix.task == 'post-details'
        run: |
          set -euo pipefail
          test -d public/data/posts/v1
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'. Producers must write under posts/v1."
            exit 1
          fi

      - name: Build all keyword pages
        if: matrix.task == 'keyword-pages'
        run: pnpm tsx scripts/build-keyword-json.ts
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      - name: Validate output layout
        if: matrix.task == 'keyword-pages'
        run: |
          set -euo pipefail
          test -d public/data/keywords
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'. Producers must write under proper subtrees."
            exit 1
          fi

      - name: Upload singular build artifact (search-index)
        if: matrix.task == 'search-index'
        uses: actions/upload-artifact@v4
        with:
          name: artifact-singular-search-index
          path: public
          if-no-files-found: error

      - name: Upload singular build artifact (post-details)
        if: matrix.task == 'post-details'
        uses: actions/upload-artifact@v4
        with:
          name: artifact-singular-post-details
          path: public
          if-no-files-found: error

      - name: Upload singular build artifact (keyword-pages)
        if: matrix.task == 'keyword-pages'
        uses: actions/upload-artifact@v4
        with:
          name: artifact-singular-keyword-pages
          path: public
          if-no-files-found: error

  # 'main' 페이지들을 병렬로 빌드하는 Job
  build_main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        range: ["3h", "6h", "24h", "1w"]
        section: ["fresh", "trending", "top", "ranked"]
      fail-fast: false # 특정 조합이 실패해도 다른 조합은 계속 실행합니다.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check DB ENVs (masked-safe)
        run: |
          HOST='${{ secrets.POSTGRES_HOST }}'
          PORT='${{ secrets.POSTGRES_PORT }}'
          USER='${{ secrets.POSTGRES_USER }}'
          PASS='${{ secrets.POSTGRES_PASSWORD }}'
          DB='${{ secrets.POSTGRES_DB }}'

          missing=0
          for k in HOST PORT USER PASS DB; do
            v=$(eval echo \${$k})
            if [ -z "$v" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi

          echo "All Postgres secrets are set."
          # Show masked summary without leaking password
          echo "masked=postgresql://${USER:+***}@${HOST}${PORT:+:$PORT}/${DB}"
          # Show non-sensitive breakdown
          echo "host=$HOST port=${PORT:-5432} user_set=$([ -n "$USER" ] && echo yes || echo no) db=$DB"
          # Password diagnostics without revealing
          echo "password_len=${#PASS}"
          echo "password_sha256=$(printf '%s' "$PASS" | sha256sum | cut -d' ' -f1)"
      - name: Build main pages
        run: pnpm tsx scripts/build-main-json.ts
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          RANGE: ${{ matrix.range }}
          SECTION: ${{ matrix.section }}
      - name: Validate output layout
        run: |
          set -euo pipefail
          test -d "public/data/home/v1/${{ matrix.range }}/${{ matrix.section }}"
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'."
            exit 1
          fi
      - name: Upload main build artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-main-${{ matrix.range }}-${{ matrix.section }}
          path: public/data/home/v1/${{ matrix.range }}/${{ matrix.section }}/

  # 'category' 페이지들을 병렬로 빌드하는 Job
  build_categories:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 참고: 이 목록을 실제 사용하는 카테고리 목록으로 확장해야 합니다.
        category: ["all", "video", "youtube"]
        range: ["3h", "6h", "24h", "1w"]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check DB ENVs (masked-safe)
        run: |
          HOST='${{ secrets.POSTGRES_HOST }}'
          PORT='${{ secrets.POSTGRES_PORT }}'
          USER='${{ secrets.POSTGRES_USER }}'
          PASS='${{ secrets.POSTGRES_PASSWORD }}'
          DB='${{ secrets.POSTGRES_DB }}'

          missing=0
          for k in HOST PORT USER PASS DB; do
            v=$(eval echo \${$k})
            if [ -z "$v" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi

          echo "All Postgres secrets are set."
          # Show masked summary without leaking password
          echo "masked=postgresql://${USER:+***}@${HOST}${PORT:+:$PORT}/${DB}"
          # Show non-sensitive breakdown
          echo "host=$HOST port=${PORT:-5432} user_set=$([ -n "$USER" ] && echo yes || echo no) db=$DB"
          # Password diagnostics without revealing
          echo "password_len=${#PASS}"
          echo "password_sha256=$(printf '%s' "$PASS" | sha256sum | cut -d' ' -f1)"
      - name: Build category pages
        run: pnpm tsx scripts/build-category-json.ts ${{ matrix.category }} ${{ matrix.range }}
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      - name: Validate output layout
        run: |
          set -euo pipefail
          test -d "public/data/category/${{ matrix.category }}/v1/${{ matrix.range }}"
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'."
            exit 1
          fi
      - name: Upload category artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-category-${{ matrix.category }}-${{ matrix.range }}
          path: public/data/category/${{ matrix.category }}/v1/${{ matrix.range }}/

  # 'all-posts' 페이지들을 병렬로 빌드하는 Job
  build_all_posts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        range: ["3h", "6h", "24h", "1w"]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check DB ENVs (masked-safe)
        run: |
          HOST='${{ secrets.POSTGRES_HOST }}'
          PORT='${{ secrets.POSTGRES_PORT }}'
          USER='${{ secrets.POSTGRES_USER }}'
          PASS='${{ secrets.POSTGRES_PASSWORD }}'
          DB='${{ secrets.POSTGRES_DB }}'

          missing=0
          for k in HOST PORT USER PASS DB; do
            v=$(eval echo \${$k})
            if [ -z "$v" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi

          echo "All Postgres secrets are set."
          # Show masked summary without leaking password
          echo "masked=postgresql://${USER:+***}@${HOST}${PORT:+:$PORT}/${DB}"
          # Show non-sensitive breakdown
          echo "host=$HOST port=${PORT:-5432} user_set=$([ -n "$USER" ] && echo yes || echo no) db=$DB"
          # Password diagnostics without revealing
          echo "password_len=${#PASS}"
          echo "password_sha256=$(printf '%s' "$PASS" | sha256sum | cut -d' ' -f1)"
      - name: Build all posts pages
        run: pnpm tsx scripts/build-allposts-json.ts ${{ matrix.range }}
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      - name: Validate output layout
        run: |
          set -euo pipefail
          test -d "public/data/all/v1/${{ matrix.range }}"
          if [ -d public/data/v1 ]; then
            echo "::error::Found unexpected 'public/data/v1'."
            exit 1
          fi
      - name: Upload all-posts artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-allposts-${{ matrix.range }}
          path: public/data/all/v1/${{ matrix.range }}/

  # 모든 빌드 Job이 완료된 후, 결과물들을 하나로 합치는 Job
  package:
    runs-on: ubuntu-latest
    # 위에서 정의한 모든 빌드 Job들이 성공해야 이 Job이 실행됩니다.
    needs: [build_singular, build_main, build_categories, build_all_posts]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # 모든 아티팩트를 'artifacts' 폴더 아래에 다운로드합니다.
          path: artifacts

      - name: Combine artifacts
        run: |
          set -euo pipefail
          mkdir -p public/data
          shopt -s nullglob
          
          echo ">>> Detecting unexpected 'v1' directories..."
          # Allow both layouts: <artifact>/public/data/... and <artifact>/data/...
          # Accepted subtrees: posts/v1, keywords/<slug>/v1, home/v1, category/<cat>/v1, all/v1
          stray=$(find artifacts -type d -name v1 \
            | grep -Ev '/(public/)?data/(posts/v1|keywords/[^/]+/v1|home/v1|category/[^/]+/v1|all/v1)$' \
            || true)
          if [ -n "$stray" ]; then
            echo "::error::Found stray 'v1' directories not under expected locations in artifacts:"
            echo "$stray" | sed 's/^/ - /'
            exit 1
          fi
          
          echo ">>> Merging trees that already include public/data as root..."
          for d in artifacts/*/public/data artifacts/*/*/public/data artifacts/*/*/*/public/data; do
            [ -d "$d" ] || continue
            echo "Merging $d -> public/data"
            rsync -a "$d"/ public/data/
          done
          
          echo ">>> Merging trees that have data/ (no public/ root) ..."
          for d in artifacts/*/data artifacts/*/*/data artifacts/*/*/*/data; do
            [ -d "$d" ] || continue
            echo "Merging $d -> public/data"
            rsync -a "$d"/ public/data/
          done
          
          echo "--- combined public/data tree (top) ---"
          ls -lah public/data || true
          echo "--- sample posts/v1 ---"
          (ls -lah public/data/posts/v1 || true)
          echo "--- sample keywords ---"
          (ls -lah public/data/keywords | head -n 50 || true)
          echo "--- has posts/v1? ---"
          (find public/data/posts/v1 -maxdepth 1 -type f -name '*.json' | head -n 5 || true)

      - name: Upload final public-data artifact
        uses: actions/upload-artifact@v4
        with:
          name: public-data
          path: public/data/**

  # 모든 아티팩트를 합친 후 Cloudflare Pages로 배포
  deploy:
    runs-on: ubuntu-latest
    needs: package
    permissions:
      contents: read
      deployments: write
    env:
      DISABLE_DB_AT_BUILD: "0"
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download final public-data artifact
        uses: actions/download-artifact@v4
        with:
          name: public-data
          path: public/data

      - name: Check DB ENVs (masked-safe)
        run: |
          HOST='${{ secrets.POSTGRES_HOST }}'
          PORT='${{ secrets.POSTGRES_PORT }}'
          USER='${{ secrets.POSTGRES_USER }}'
          PASS='${{ secrets.POSTGRES_PASSWORD }}'
          DB='${{ secrets.POSTGRES_DB }}'

          missing=0
          for k in HOST PORT USER PASS DB; do
            v=$(eval echo \${$k})
            if [ -z "$v" ]; then echo "::error::$k is empty (missing corresponding secret)"; missing=1; fi
          done
          if [ $missing -ne 0 ]; then exit 1; fi

          echo "All Postgres secrets are set."
          echo "masked=postgresql://${USER:+***}@${HOST}${PORT:+:$PORT}/${DB}"
          echo "host=$HOST port=${PORT:-5432} user_set=$([ -n "$USER" ] && echo yes || echo no) db=$DB"
          echo "password_len=${#PASS}"
          echo "password_sha256=$(printf '%s' "$PASS" | sha256sum | cut -d' ' -f1)"

      - name: Build & Export Next.js
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DISABLE_DB_AT_BUILD: ${{ env.DISABLE_DB_AT_BUILD }}
        run: |
          pnpm next build

      - name: Print working dir and tree
        run: |
          set -x
          echo "PWD:"
          pwd
          echo "--- Top level ---"
          ls -lah || true
          echo "--- public (pre-build copy result) ---"
          ls -lah public || true
          echo "--- public/data sample ---"
          ls -lah public/data || true
          ls -lah public/data/posts/v1 || true
          echo "--- out (exported) ---"
          ls -lah out || true
          echo "--- out/data/posts/v1 ---"
          ls -lah out/data/posts/v1 || true

      - name: Sanity check exported assets
        run: |
          set -e
          # Verify export root exists
          test -f out/index.html
          # Verify at least one post JSON exists at the expected path
          if compgen -G "out/data/posts/v1/*.json" >/dev/null; then
            echo "OK: found JSON in out/data/posts/v1"
            ls -lah out/data/posts/v1 | head -n 50 || true
          else
            echo "::error::No JSON files found in out/data/posts/v1"
            echo "Directory listing for troubleshooting:"
            ls -lah out || true
            ls -lah out/data || true
            ls -lah out/data/posts || true
            exit 1
          fi

      - name: Build diagnostics (DB at build?)
        run: |
          echo "DISABLE_DB_AT_BUILD=${DISABLE_DB_AT_BUILD:-unset}"
          if [ "${DISABLE_DB_AT_BUILD}" = "1" ]; then
            echo "App SHOULD NOT connect to DB during build. Ensure generateStaticParams/Metadata are guarded."
          else
            echo "App MAY connect to DB during build."
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          # 프로젝트명은 레포 시크릿으로 관리하거나 직접 문자열로 기입하세요.
          command: pages deploy out --project-name=${{ secrets.CLOUDFLARE_PAGES_PROJECT }}
          gitHubToken: ${{ secrets.TOKEN_GITHUB_COM }}
